The Phjs Language take the same principle as php but in javascript

To use PHjs, create a file with '.phjs' extension like 'index.phjs'

in this file, you can put any front end language like html, javascript (client side) or css

but, you can also put phjs code (javascript server side), you must put it in '<?phjs' and '?>' tag.

all javascript code put in this tag will be executed on server side.

to put front end code in phjs, use 'echo' or 'print' function like:

<?phjs
  echo("<font color='green'>Hello World</font>");
  // or print("<font color='green'>Hello World</font>");
?>



Example :


<html>
 <head>
  <title> Hello world with PHJS </title>
 </head>
 <body>
   <?phjs echo ("<font color='green'>Hello World</font>") ?>
 </body>
</html>


To use module imported when starting server
use 'libs' variable

for example, to take fs module : 

<?phjs
var fs = libs.fs;
?>

Example : 

<html>
 <head>
  <title> Create file with phjs </title>
 </head>
 <body>
   <font color='green'>A file is created!</font>
 </body>
</html>
<?phjs
  var fs = libs.fs;
  var util = libs.util;
  fs.writeFile(cd + "/file.txt", "There is file generated by phjs", function(err) {
	   if(err) {
	     echo(util.format(err));
	   }
  }); // cd variable is the current directory of this phjs script
?>

GET requests :
 to use GET requests, use args.GET variable

 args.GET is an array
 each element of args.GET is a string
 
  for exemple :

    you go to 127.0.0.1/program.phjs?msg=helloworld
    in program.phjs, the value of args.GET.msg (or args.GET["msg"]) will be : "helloworld"

POST requests : 
 to use POST requests, use args.POST variable
 
 args.POST is an array
 each element of args.POST is an object who contain "type" and "content" element, "type" can be 'text' or 'file'

 if "type" is 'text', the value of "content" will be a string who contain the GET argument

 if "type" is 'file', "content" will be an object who contain all properties of file uploaded :

   for example, we upload a picture with html form who use POST request and enctype="multipart/form-data" option
   (name of file in form is 'Picture')

   in args.POST we found :

   Picture: { type: 'file', content: File { 
                                           domain: null, 
                                           _events: {}, 
                                           _eventsCount: 0, 
                                           _maxListeners: undefined, 
                                           size: 1668, 
                                           path: '/tmp/upload_0c789624c3ccbae65cd8bac05585a17a', 
                                           name: 'Hello.png', 
                                           type: 'image/png', 
                                           hash: null, 
                                           lastModifiedDate: 2018-05-05T07:55:25.957Z, 
                                           _writeStream: [Object] }
            }

  this file uploaded is stored in '/tmp/upload_0c789624c3ccbae65cd8bac05585a17a/', his name is 'Hello.png', this a 'image/png' file, his weight is 1668 bytes